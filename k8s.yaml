apiVersion: v1
kind: Namespace
metadata:
  name: test
---
apiVersion: v1
kind: Service
metadata:
  name: hello-prometheus
  namespace: test
  labels:
    kubernetes.io/name: hello-prometheus
    kubernetes.io/part-of: testing-prometheus
spec:
  selector:
    kubernetes.io/name: hello-prometheus
  type: NodePort
  ports:
  - name: hello-prometheus
    protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-prometheus
  namespace: test
  labels:
    kubernetes.io/name: hello-prometheus
    kubernetes.io/part-of: testing-prometheus
spec:
  selector:
    matchLabels:
      kubernetes.io/name: hello-prometheus
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        kubernetes.io/name: hello-prometheus
    spec:
      containers:
      - name: hello-prometheus
        image: docker-registry/hello-prometheus:0.0.1
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        ports:
        - containerPort:  8080
          protocol: TCP
      restartPolicy: Always
---

