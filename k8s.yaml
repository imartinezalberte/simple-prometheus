apiVersion: v1
kind: Namespace
metadata:
  name: test
---
apiVersion: v1
kind: Service
metadata:
  name: hello-prometheus
  namespace: test
  labels:
    kubernetes.io/name: hello-prometheus
    kubernetes.io/part-of: testing-prometheus
spec:
  selector:
    kubernetes.io/name: hello-prometheus
  type: NodePort
  ports:
  - name: hello-prometheus
    protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-prometheus
  namespace: test
  labels:
    kubernetes.io/name: hello-prometheus
    kubernetes.io/part-of: testing-prometheus
spec:
  selector:
    matchLabels:
      kubernetes.io/name: hello-prometheus
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        kubernetes.io/name: hello-prometheus
    spec:
      containers:
      - name: hello-prometheus
        image: docker-registry/hello-prometheus:0.0.1
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        ports:
        - containerPort:  8080
          protocol: TCP
      restartPolicy: Always
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: client-config
  namespace: test
data:
  endpoints: "hello bye"
  port: "8080"
  batch: "200"
  main.sh: |+
    #!/bin/bash

    HOSTNAME="hello-prometheus.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local."
    PORT=${PORT:-"8080"}
    BATCH=${BATCH:-"100"}
    ENDPOINTS=${ENDPOINTS:-"hello bye"}

    curl --retry 10 --retry-all-errors --retry-delay 5 -s -o /dev/null http://${HOSTNAME}:${PORT}/api/v1/${ENDPOINTS[1]}

    echo "Batch process"
    for i in ${ENDPOINTS[@]}; do
      echo "curling to $i"
      for ((j=0; j<${BATCH};j++)); do
        echo "curling to $i in $j attempt"
        curl http://${HOSTNAME}:${PORT}/api/v1/${i} -sw " %{http_code}\n"
      done
    done

    echo "Zombie process"
    while true; do echo "curling in zombie attempt"; for i in ${ENDPOINTS[@]}; do curl http://${HOSTNAME}:${PORT}/api/v1/$i -sw " %{http_code}\n"; done; sleep 1s; done
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: test
  labels:
    kubernetes.io/name: client-hello-prometheus
    kubernetes.io/part-of: testing-prometheus
spec:
  selector:
    matchLabels:
      kubernetes.io/name: client-hello-prometheus
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%    
    type: RollingUpdate
  template:
    metadata:
      labels:
        kubernetes.io/name: client-hello-prometheus
    spec:
      containers:
      - name: client-hello-prometheus
        image: alpine:3.16
        imagePullPolicy: IfNotPresent
        workingDir: /scripts
        stdin: true
        command: ["/bin/sh", "-c", "apk add curl bash && ls -al /scripts && bash /scripts/main.sh"]
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: client-config
              key: port
        - name: ENDPOINTS
          valueFrom:
            configMapKeyRef:
              name: client-config
              key: endpoints
        - name: BATCH
          valueFrom:
            configMapKeyRef:
              name: client-config
              key: batch
        volumeMounts:
        - name: script
          mountPath: /scripts/main.sh
          subPath: main.sh
      volumes:
        - name: script
          configMap:
            name: client-config
            defaultMode: 0744
            items:
            - key: main.sh
              path: main.sh
      restartPolicy: Always
---
